-- REGISTROS: ESTRUCTURAS QUE ALBERGAN UN TIPO DE DATO

/*DECLARE 

TYPE TPERSONA IS RECORD(
     CODIGO NUMBER,
     NOMBRE VARCHAR(100),
     EDAD NUMBER
     );
     
V_VAR1 TPERSONA;

BEGIN
  V_VAR1.CODIGO := 1;
  V_VAR1.NOMBRE := 'ABRAHAM';
  V_VAR1.EDAD := 24;
  
  DBMS_OUTPUT.PUT_LINE('CODIGO: ' || TO_CHAR(V_VAR1.CODIGO) || 'PERSONA: ' || V_VAR1.NOMBRE || 'EDAD: ' || TO_CHAR(V_VAR1.EDAD) || '.');
  
  END;*/
  
--INDEX BY: PERMITE CREAR ARREGLOS EN PLSQL

/*DECLARE 

TYPE T_LISTA IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;

V_LISTA T_LISTA;

BEGIN
  FOR I IN 1..10 LOOP
    V_LISTA(I) := I;
    END LOOP;
    
    FOR I IN 1..10 LOOP
      DBMS_OUTPUT.PUT_LINE(I);
      END LOOP;
    END;*/
    

--NESTED TABLE: TAMBIEN PERMITE CREAR ARREGLOS EN PLSQL

/*DECLARE

TYPE T_LISTA IS TABLE OF NUMBER;

V_LISTA T_LISTA := T_LISTA();

BEGIN
  FOR I IN 1..10 LOOP
    V_LISTA.EXTEND;
    V_LISTA(I) := I;
    END LOOP;
    
  FOR I IN 1..10 LOOP
    DBMS_OUTPUT.PUT_LINE(I);
    END LOOP;
    
  END;*/
  
  
--VARRAY: PERMITEN CREAR ARREGLOS EN PLSQL, PERO TIENEN TAMAÑO ESPECIFICO DESDE SU INICIO

/*DECLARE 

TYPE T_LISTA IS VARRAY(10) OF NUMBER;

V_LISTA T_LISTA := T_LISTA();

BEGIN
  FOR I IN 1..10 LOOP
    V_LISTA.EXTEND;
    V_LISTA(I) := I;
    END LOOP;
    
  FOR I IN 1..10 LOOP
    DBMS_OUTPUT.PUT_LINE(I);
    END LOOP;
    
  END;*/
  



  
  
  
  
  





